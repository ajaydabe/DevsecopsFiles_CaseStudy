installing kubernetes cluster



# Kubeadm Installation Guide

This guide outlines the steps needed to set up a Kubernetes cluster using kubeadm.

## Pre-requisites

- Ubuntu OS 

- t2.medium instance type or higher

---

## AWS Setup

- Make sure all traffic is allowed on all instance

---

## Execute on Both "Master" & "Worker Node"

Run the following commands on both the master and worker nodes to prepare them for kubeadm.
=============================================================================================================

# disable swap
sudo swapoff -a

# Create the .conf file to load the modules at bootup
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter

# sysctl params required by setup, params persist across reboots
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF

# Apply sysctl params without reboot
sudo sysctl --system

## Install CRIO Runtime
sudo apt-get update -y
sudo apt-get install -y software-properties-common curl apt-transport-https ca-certificates gpg

sudo curl -fsSL https://pkgs.k8s.io/addons:/cri-o:/prerelease:/main/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/cri-o-apt-keyring.gpg
echo "deb [signed-by=/etc/apt/keyrings/cri-o-apt-keyring.gpg] https://pkgs.k8s.io/addons:/cri-o:/prerelease:/main/deb/ /" | sudo tee /etc/apt/sources.list.d/cri-o.list

sudo apt-get update -y
sudo apt-get install -y cri-o

sudo systemctl daemon-reload
sudo systemctl enable crio --now
sudo systemctl start crio.service

echo "CRI runtime installed successfully"

# Add Kubernetes APT repository and install required packages
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

sudo apt-get update -y
sudo apt-get install -y kubelet="1.29.0-*" kubectl="1.29.0-*" kubeadm="1.29.0-*"
sudo apt-get update -y
sudo apt-get install -y jq

sudo systemctl enable --now kubelet
sudo systemctl start kubelet

---------------------------------------------------
## Execute ONLY on "Master Node"


sudo kubeadm config images pull

sudo kubeadm init

mkdir -p "$HOME"/.kube
sudo cp -i /etc/kubernetes/admin.conf "$HOME"/.kube/config
sudo chown "$(id -u)":"$(id -g)" "$HOME"/.kube/config


# Network Plugin = calico

kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.0/manifests/calico.yaml

--------------------------------------------------------

## Execute on ALL of your Worker Node's

1. Perform pre-flight checks


   sudo kubeadm reset pre-flight checks


2. Paste the join command you got from the master node and append `--v=5` at the end but first use sudo su command to become root (avoid using sudo your-token).

   sudo su
   <your-token --v=5>


## Verify Cluster Connection

**On Master Node:**


kubectl get nodes



Assignment 1
M
   12  sudo nano assign1.yaml
   13  kubectl get deploy
   15  kubectl apply -f assign1.yaml 
   16  kubectl get deploy
   17  kubectl get pods
   18  kubectl get pods -o wide
   
ubuntu@ip-172-31-26-227:~$ cat assign1.yaml 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: assignment1-deployment
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80


Assignment 2
M
   22  sudo nano assign2.yaml
   23  kubectl apply -f assign2.yaml 
   24  kubectl et svc
   25  kubectl get svc
   
cat assign2.yaml 
  
apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  type: NodePort
  selector:
    app: nginx
  ports:
    - port: 80
      # By default and for convenience, the `targetPort` is set to
      # the same value as the `port` field.
      targetPort: 80
      # Optional field
      # By default and for convenience, the Kubernetes control plane
      # will allocate a port from a range (default: 30000-32767)
      nodePort: 30007
    

Assignment 3  
M
       kubectl get deploy
   28  kubectl edit deploy
   29  kubectl get deploy

Assignment 4
   30  kubectl get po
   31  kubectl edit svc
   32  kubectl get svc
   

Assignment 5

New instance, install minikube


minikube commands

sudo apt update
sudo apt install docker.io
curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube_latest_amd64.deb
sudo dpkg -i minikube_latest_amd64.deb
sudo chmod 777 /var/run/docker.sock
minikube start
sudo snap install kubectl --classic
minikube addons enable ingress


kubectl get no
kubectl create deployment nginx --image=nginx --port=80 --replicas=2
kubectl get deploy
kubectl expose deploy nginx --type=NodePort --name=nginx-np
kubectl get svc
kubectl port-forward service/mginx-np --address 0.0.0.0 :80
sudo nano ingress.yaml
kubectl apply -f ingress.yaml 
kubectl get ing
kubectl port-forward service/ingress-nginx-controller -n ingress-nginx --address 0.0.0.0 :80

    
ubuntu@ip-172-31-26-227:~$ cat ingress.yaml 
apiVersion: networking.k8s.io/v1                                                                                                                              
kind: Ingress                                                                                                                                                 
metadata:                                                                                                                                                     
 name: ingress                                                                                                                                               
 annotations:                                                                                                                                                
   nginx.ingress.kubernetes.io/rewrite-target: /                                                                                                             
spec:      
 ingressClassName: nginx  
 rules:                                                                                                                                                      
  - http:                                                                                                                                                     
     paths:                                                                                                                                                  
     - path: /nginx                                                                                                                                          
       pathType: Prefix                                                                                                                                      
       backend:                                                                                                                                              
         service:                                                                                                                                            
           name: nginx                                                                                                                                       
           port:                                                                                                                                             
             number: 80